======================= FINDING FILES ==================================
FIND
   # In folder_path find the file called search_string
   find <folder_path> -name "search_string"
      args:
         -iname : case insensitive name
         ! -iname : NOT the name
         -type d : search only directory names
         -type f : search only for files
         -mtime <days> : search for only time-limited result in days
         -cmin-<min> : modified in the last (minus) minutes
         -exec cmd {} : execute the 'cmd' command on the found files
      ex:
      1) # search only for directories, not having permission of 755 (rwx r-x r-x) 
         # and execute the change of permission (chmod) setting them to 755.
         find . -type d ! -perm 755 -exec chmod 755 {} \;
      
      2) # finds regex of the certain type, 36 small letter alphanumeric characters
         # with slash or dash
         find . -regextype sed -regex ".*/[a-f0-9\-]\{36\}\.jpg"

      3) # finds will execute grep and will substitute {} with the filename(s) found. 
         # The difference between ; and + is that with ; 
         # a single grep command for each file is executed whereas with + as many 
         # files as possible are given as parameters to grep at once.
         find . -exec grep chrome {} \;
         find . -exec grep chrome {} + 
   
      4) # finds the files ending in "unistd.h" and runs a grep on them for the 
         # string "NR_SYSCALLS" and then prints only their file names
         # NOTE: successive execs only run on previously successful exec!
         find . -regextype sed -regex ".*unistd.h" -exec grep NR_SYSCALLS {} \; -exec echo {} \;
   
      5) # running all execs regardless of previous exec's outcome
         find . -name "*.txt" \( -exec echo {} \; -o -exec true \; \) -exec grep banana {} \;
   
      6) # use the regex for "unistd.h" and then execute a bash script for grep 
         # "NR_SYSCALLS" and print all the files   
         find . -regextype sed -regex ".*unistd.h" -exec sh -c 'grep NR_SYSCALLS "{}"; echo "{}"' \;
         find . -regextype sed -regex ".*unistd.h" -exec sh -c 'if [grep NR_SYSCALLS "{}"] then echo "{}"; fi' \;
         find . -name \*.cpp -exec grep -q "debug" '{}' \; -print

GREP
   LOOK for <string> in <file>
      grep -r <string> <file>
      eg. grep -r "error" /var/log/syslog - searches for "error" in "syslog"
   SEARCH files and print line number
      grep -r -n "localhost" .
   
MAN
   man <cmd> : information on most commands (man grep) 
   
HELP 
   help <cmd> : information on most commands (help cd - note man cd is empty!)

AWK
   Look for the third arguments in a file, and count the occurances
      awk '{count[$3]++} END {for (word in count) print word, count[word]}' file
      awk '{print $3}' file | sort | uniq -c

SED
   SUBSTITUTIONS of words in a string
      echo "Bash Scripting Language" | sed 's/Bash/Perl/'
   ON a specific line
      sed '2 s/Python/perl/g' python.txt : the second line
      sed 's/Python/perl/g2' python.txt : the second occurance on each line
   SEARCH for a string in a file or STDOUT:
      sed -n '/root/p' /etc/passwd
      <string output> | sed -n '/search_str/p'  
      
   src: https://linuxhint.com/50_sed_command_examples/#s1
   
======================= MANAGE FILESYSTEM ==============================
FILE MANAGER - size explorer, manager, navigator and deletor of files and directories
   sudo ncdu -x <location> : -x ignores network drives. BEST SPACE FEERER.

Human readable (MBs, GBs, ...) file list
   ls -lh
   
MOUNT points and available space
   df
   
ALL FILES in current directory
   du
   du -sm *
   du -sm * | sort -nr | head -15  (top 15 items in size)
   
LIST DRIVES all hard drives + partitions (tree structure)
   lsblk
   
UUID of a drive
   blkid /dev/...

DIRECTORY TOTALS list of directory sizes
   du -hsc <location>
   
DETAILED info on all storage disks
   sudo fdisk -l 
   
CREATE PARTITION, partition table, etc. Interactive tool.
   sudo fdisk /dev/sdb
      args:
         p - print
         w - write out changes
         n - add new partition
         g - create partition table
         
FORMAT
   sudo mkfs.<type> <location> formats a the <location> to the certain type
     eg. : sudo mkfs.ext4 /dev/sdb1 : will format the /dev/sdb1 to type of ext4
     
MOUNT a drive
   mount <device> <location> : mount the device to the location
      e.g.mount /dev/sda4 /media/myDir
   
UNMOUNT a drive
   umount <drive location>
      e.g. umount /dev/sd4
           umount /media/myDir

AUTO-MOUNT filesystem table holding all the entries of the automounted drives 
   # CAUTION: has root! careful editing
   /etc/fstab
   # example entry of a new hard-drive
      # <file system>                           <mount point>        <type>  <options>  <dump>  <pass>
      UUID=ae9cefed-f718-4fc9-b0de-1dcfe11b9cea /home/pav/Desktop/HD1 ext4   defaults   0       0

CHECK fstab
   sudo mount -a
   
SHOW Tree:
   tree

======================= PACKAGE MANAGER and PKGS =======================
INSTALL .deb package
   sudo dpkg -i DEB_PACKAGE

UNINSTALL
   sudo apt remove APPLICATION
   sudo apt autoremove  (gets rid of dependencies)

SEARCH APT
   apt search <string>

ADD Repo
   sudo apt add repository <name>
   
REMOVE Pkg
   # removes the package (remove) and its configuration (--purge)
   sudo apt remove --purge <pkg_name>

UPDATING
   sudo apt update : update the index of all the listed distros
   sudo apt upgrade : update all pkgs but do not download new dependencies (very safe)
   sudo apt dist-upgrade : update all pkgs, updating dependencies and downloading if
                           necessary (can break the system! in rare occasions)
                           
HISTORY of APT command
   /var/log/apt/term.log  
   
REPO local lists
   /etc/apt/sources.list : maintained by Ubuntu
   /etc/apt/sources.list.d/<file_name>.list : a file for a new non-Ubuntu repository                         

ADD repo:
   see webpage specific webpage for link and format
   
======================= FILES and PERMISSIONS ======================
FILE format
   d/- r w x  r w x  r w x
    - directory or file (d/-)
    - r - read, w - write, x - execute
    - rwx: owner
    - rwx: group
    - rwx: other
    
CHANGE ownership of a file
   sudo chown <user_name>:<group> <filename>
   
CHANGE all ownerships in a directory
   sudo chown <user_name>:<group> -R <directory>
   
CHANGE file permissions
   chmod g+w <filename> : give group the writting permission on <filename>
   chmod u=rwx <filename> : give owner the rwx permission on the <file>
   chmod o=rwx <filename> : give to others
   chmod g=rwx <filename> : give to group
   chmod u-r <filename> : remove read permission from owner
   
OCTAL change of permission:
   chmod 777 <filename> : change <filename> to rwx/rwx/rwx : 111/111/111 : 7/7/7 : 777 

DIRECTORY string
   d rwx rwx rwx : 
      r - read contents 
      w - to add files
      x - to be able to 'cd' in directory, respective of owner/group/other
      
SWITCH user
   su <user> : switch to specified user (sudo su root/ sudo su - goes into root)
   
UNZIP 
  tar –xvzf file.tar.gz  
   
========================== SERVER COMMANDS =============================
RUN Script remotely
   tmux : Run your script 
   Ctrl + b, d : Detaches from the process and you can safely log off the remote machine
   Ctrl + b, s : Switch to side-by-side session
   tmux list-sessions: list sessions
   tmux attach : Gets back into your session
   
INSTALL Specific Python
   1. for pip: apt install libssl-dev libncurses5-dev libsqlite3-dev libreadline-dev libtk8.5 libgdm-dev libdb4o-cil-dev libpcap-dev
   1a. bz2 missing: sudo apt-get install libbz2-dev
   1b. lzma module: sudo apt-get install liblzma-dev
   2. wget https://python.org/ftp/python/3.7.6/Python-3.7.6.tgz
   3. tar xvzf *.tgz
   4. cd .
   5. ./configure --prefix=$HOME/.local
   6. make
   7. make install
   8. in .bash_rc: add: PATH=$HOME/.local/bin:$PATH (if its not already there)

======================= MANAGE SYSTEM SERVICES =========================
CHECK status
   systemctl status <service>
   
STOP a service
   sudo systemctl stop <service>

DISABLE a service from booting after restart
   sudo systemclt disable <service>
   
TASK viewer
   top : process list
   htop : glorified process list

UPTIME
   uptime

FREE memory total
   free -m : megabytes
   
SEE hardware
   lspci
   
======================= USERS and ADMINISTRATION =======================
ADD User
   sudo adduser <user_name>

REMOVE User
   sudo deluser <user_name>

GIVE Group membership to user
   sudo gpasswd -a <user_name> <group> 

REMOVE group membership from a user
   sudo gpasswd -d <user_name> <group>   

LIST Groups
   groups <user_name>

CONFIG for all groups in PC
   /etc/group
   
LIST All Users:
   less /etc/passwd
 
ADD a group
   sudo groupadd <group_name>

REMOVE a group
   sudo groupdel <group_name>
   
WHO is logged into the system
   who
   w

ADD User to a Group:
   usermod -aG <group> <user> : ex: usermod -aG sudo pav

======================= INTERNET =====================
LOCAL IP ip
   ip a

SCAN IPs
   nmap -sP 192.168.0.*   

SSH copy 
   scp pav@192.168.0.108:/media/drive2/Users/pg-elevated/Documents/McMaster/* .
   scp server@192.168.0.155:/home/server/linux_cmds.txt /home/kliment/Desktop
  
SSH Remote connection
   ssh <user>@ip : server@192.168.0.155
   ssh kubeuser@badbunch.net -v : verbose
   
FORCE No SSH:
   ssh -o PubkeyAuthentication=no kubeuser@badbunch.net
   
DOWNLOAD file
   wget <http://...> : downloads a file from the web
   
GENERATE Key
   ssh-keygen 
   eval $(ssh-agent)
   ssh-add ~/.ssh/<private_key_file> 

SETUP No-pass Login:
   1. ssh-keygen -t rsa -b 4096 -C “your_email@domain.com”
   2. cat .ssh/id_rsa.pub | ssh [remote_username]@[server_ip_address] 'cat >> .ssh/authorized_keys'
   
======================= LINUX FILESYSTEM =============
/boot : images of bootable instances
/dev : files that represent devices
/lib : system libraries
/media : folder to attach removable devices (only by convention)
/mnt : folder for permenant hard drives attachment (only by convention)
/opt : optional storage
/proc : processor information
/proc/vmstat : memory information
/root : root's home directory
/tmp : temporary folder
/var/log : logs, kernel logs, system logs, ...

======================= LOGS =========================
SYSTEM logs:
   /var/log/auth.log - all system logins
   /var/log/syslog - system log

CONTINUOUS log monitoring:
   tail -f /var/log/syslog

JORNAL ctl:
   journalctl -u <systemd> - ex: journalctl -u apache2
   journalctl -fu apache2 - follow unit <apache2> constantly
   journalctl --vacuum-size=100M : set size to 100M (vs the 4GB)
   journalctl --vacuum-time=10d : set the journal to 10 days ago only
   
PRINT to file and terminal:
   command | tee file.txt

======================= ALIASES ======================
CREATE alias
   alias <alias_name>="ls -l" - alias_name defined as ls -l

DEFINITIONS
   alias

LOCATION
   /home/$HOME/.bashrc

==================== BASHRC MODS ======================
AUTOCOMPLETE History:
   if [[ $- == *i* ]]
   then
      bind '"\e[5~": history-search-backward'
      bind '"\e[6~": history-search-forward'
   fi

HOTKEY Check:
   cat : then type any key. UP ARROW -> ^[[A ( ^[ = \e )

======================= SCRIPTS ======================
SHEBANG (sha-bang) directs the shell to the right interpreter of the binary
   !# /bin/bash

======================= STDIN, STDOUT, STDERR ========
STDIN:   standard input (input in terminal)     '1>'
STDOUT:  standard output (text in terminal)     '>' or '0>' (I think )
STDERR:  errors dumped from program execution   '2>'
eg. 
   1) # find in root, all files with "log" in their name, dump the errors 
      # (i.e. Permission denied, etc..) into /dev/null (garbage, void, directory)
      find / -name "log" 2> /dev/null
   
   2) # dump STDERR into null and STDOUT into a file
      find / -name "log" 2> /dev/null > /home/$USER/mylog.txt

======================= JOBS =========================
CTRL + Z : suspend/pause the foreground process 
CTRL + C : kill/stop the foreground process

LIST jobs
   jobs - [1]+ : current process in queue
          [1]- : previous process in queue
          [1]  : behind + and - in the queue

FOREGROUND
   fg : brings the + process into the foreground
   fg # : brings the [#] process into the foreground
   
RUN in background
   <binary> &
      e.g. vlc &
      
======================= WEBPAGE ======================
INSTALL apache
   apt install apache2
   ip a
   /var/www/html/*.html
   
======================= MISC =========================
WEBMIN: a https control of your server
   webmin

INPUTRC: Retrieve previous commands from the history
   1 gedit /etc/inputrc
   2 # alternate mappings for "page up" and "page down" to search the history
     # "\e[5~": history-search-backward
     # "\e[6~": history-search-forward
   3 uncomment
   4 try "command + page up"

WRITE-PROTECTION: Usb is write-protected and cannot be mounted as writeable
   df <file> : identifies the file's mounting point
   sudo blockdev --setrw /dev/sXX#
   sudo mount -o remount,rw /dev/sXX# /<location of your choice>
   sudo hdparm -r0 /dev/sXX#
   sudo dd if=/dev/zero of=/dev/sdh1 bs=1k count=2048 : write all 0s to the block
   sudo mkfs.vfat /dev/sXX# : Format the drive to fat?
   dmesg | grep sda : Checks for hardware faults
   
SPEED TEST: A terminal speed test script
   curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python3 -
   
HISTORY of commands
   history
   
PDF Merger:
   apt-get install pdfshuffler : "PDF Arranger", used to combine PFDs
   
TODO:
+ sudo lshw -C video
+ lspci | grep VGA

FIREFOX:
   (1)  about:config
   (2) tabm
   (3) browser.tabs.tabMinWidth
   
LINUX Sizes:
   Side bar size: Dock in Settings
   Top Bar sie: Tweaks -> Fonts -> Text scaling
   Icons -> tweaks -> extensions -> Desktop icons
         or) sudo gedit /usr/share/gnome-shell/extensions/desktop-icons@csoriano/prefs.js
         const ICON_SIZE = { ... }
   
PDF Split:
  pdftk complete.pdf cat 12-15 output pages12to15.pdf

